{"version":3,"sources":["app/routes/contact/basic/index.js"],"names":["contactId","filterOptions","id","name","icon","Contact","_this","Object","D_gaxon_product_jumbo_react_3_x_x_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","D_gaxon_product_jumbo_react_3_x_x_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","D_gaxon_product_jumbo_react_3_x_x_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","ContactSideBar","user","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","className","util_IntlMessages__WEBPACK_IMPORTED_MODULE_18__","util_CustomScrollbars__WEBPACK_IMPORTED_MODULE_19__","style","height","props","width","_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_12__","variant","color","aria-label","onClick","onAddContact","map","option","key","concat","state","selectedSectionId","onFilterOptionSelect","bind","D_gaxon_product_jumbo_react_3_x_x_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","addFavourite","data","setState","alertMessage","starred","showMessage","contactList","contact","D_gaxon_product_jumbo_react_3_x_x_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","allContact","onContactSelect","selected","selectedContacts","addContactState","onContactClose","filterOption","filter","frequently","onSaveContact","isNew","push","onDeleteContact","onDeleteSelectedContact","contacts","filterContact","userName","toLowerCase","indexOf","handleRequestClose","getAllContact","length","getUnselectedAllContact","noContentFoundMessage","drawerState","email","avatar","require","searchUser","selectedContact","evt","target","value","_this$state","_material_ui_core_Drawer__WEBPACK_IMPORTED_MODULE_8__","open","onClose","onToggleDrawer","_material_ui_core_IconButton__WEBPACK_IMPORTED_MODULE_9__","components_AppModuleHeader_index__WEBPACK_IMPORTED_MODULE_16__","placeholder","notification","apps","onChange","updateContactUser","_material_ui_core_Checkbox__WEBPACK_IMPORTED_MODULE_10__","indeterminate","checked","onAllContactSelect","components_contact_ContactList__WEBPACK_IMPORTED_MODULE_15__","components_contact_AddContact__WEBPACK_IMPORTED_MODULE_17__","thumb","phone","designation","_material_ui_core_Snackbar__WEBPACK_IMPORTED_MODULE_13__","anchorOrigin","vertical","horizontal","autoHideDuration","ContentProps","aria-describedby","message","Component","connect","_ref","settings"],"mappings":"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","file":"static/js/156.f2f9fc5e.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport {connect} from 'react-redux';\r\nimport Button from '@material-ui/core/Button';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport contactList from '../data/contactList';\r\nimport ContactList from 'components/contact/ContactList';\r\nimport AppModuleHeader from 'components/AppModuleHeader/index';\r\nimport AddContact from 'components/contact/AddContact';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport CustomScrollbars from 'util/CustomScrollbars';\r\n\r\nlet contactId = 723812738;\r\n\r\nconst filterOptions = [\r\n  {\r\n    id: 1,\r\n    name: 'All contacts',\r\n    icon: 'zmdi-menu'\r\n  }, {\r\n    id: 2,\r\n    name: 'Frequently contacted',\r\n    icon: 'zmdi-time-restore'\r\n\r\n  }, {\r\n\r\n    id: 3,\r\n    name: 'Starred contacts',\r\n    icon: 'zmdi-star'\r\n  }\r\n];\r\n\r\nclass Contact extends Component {\r\n\r\n  ContactSideBar = (user) => {\r\n    return <div className=\"module-side\">\r\n      <div className=\"module-side-header\">\r\n        <div className=\"module-logo\">\r\n          <i className=\"zmdi zmdi-account-box mr-4\"/>\r\n          <span><IntlMessages id=\"chat.contacts\"/></span>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"module-side-content\">\r\n        <CustomScrollbars className=\"module-side-scroll scrollbar\"\r\n                          style={{height: this.props.width >= 1200 ? 'calc(100vh - 200px)' : 'calc(100vh - 80px)'}}>\r\n          <div className=\"module-add-task\">\r\n            <Button className=\"jr-btn btn-block\" variant=\"contained\" color=\"primary\" aria-label=\"add\"\r\n                    onClick={this.onAddContact}>\r\n              <i className=\"zmdi zmdi-account-add zmdi-hc-fw\"/>\r\n              <span>Add New Contact</span>\r\n            </Button>\r\n          </div>\r\n          <div className=\"module-side-nav\">\r\n            <ul className=\"module-nav\">\r\n              {filterOptions.map(option => <li key={option.id} className=\"nav-item\">\r\n                  <span\r\n                    className={`jr-link ${option.id === this.state.selectedSectionId ? 'active' : ''}`} onClick={\r\n                    this.onFilterOptionSelect.bind(this, option)\r\n                  }>\r\n                    <i className={`zmdi ${option.icon}`}/>\r\n                    <span>{option.name}</span>\r\n                  </span>\r\n                </li>\r\n              )}\r\n\r\n            </ul>\r\n          </div>\r\n        </CustomScrollbars>\r\n      </div>\r\n    </div>\r\n\r\n  };\r\n\r\n  addFavourite = (data) => {\r\n    this.setState({\r\n      alertMessage: data.starred ? 'Contact removed as star' : 'Contact marked as star',\r\n      showMessage: true,\r\n      contactList: this.state.contactList.map((contact) => contact.id === data.id ? {\r\n        ...contact,\r\n        starred: !data.starred\r\n      } : contact),\r\n      allContact: this.state.allContact.map((contact) => contact.id === data.id ? {\r\n        ...contact,\r\n        starred: !data.starred\r\n      } : contact)\r\n    })\r\n  };\r\n  onContactSelect = (data) => {\r\n    data.selected = !data.selected;\r\n    let selectedContacts = 0;\r\n    const contactList = this.state.contactList.map(contact => {\r\n        if (contact.selected) {\r\n          selectedContacts++;\r\n        }\r\n        if (contact.id === data.id) {\r\n          if (contact.selected) {\r\n            selectedContacts++;\r\n          }\r\n          return data;\r\n        } else {\r\n          return contact;\r\n        }\r\n      }\r\n    );\r\n    this.setState({\r\n      selectedContacts: selectedContacts,\r\n      contactList: contactList\r\n    });\r\n\r\n  };\r\n\r\n\r\n  onAddContact = () => {\r\n    this.setState({addContactState: true});\r\n  };\r\n  onContactClose = () => {\r\n    this.setState({addContactState: false});\r\n  };\r\n  onFilterOptionSelect = (option) => {\r\n    switch (option.name) {\r\n      case 'All contacts': {\r\n        this.setState({\r\n          selectedSectionId: option.id,\r\n          filterOption: option.name,\r\n          contactList: this.state.allContact\r\n        });\r\n        break;\r\n      }\r\n      case 'Frequently contacted': {\r\n        this.setState({\r\n          selectedSectionId: option.id,\r\n          filterOption: option.name,\r\n          contactList: this.state.allContact.filter((contact) => contact.frequently)\r\n        });\r\n        break;\r\n      }\r\n      case 'Starred contacts': {\r\n        this.setState({\r\n          selectedSectionId: option.id,\r\n          filterOption: option.name,\r\n          contactList: this.state.allContact.filter((contact) => contact.starred)\r\n        });\r\n        break;\r\n      }\r\n      default: {\r\n        this.setState({\r\n          selectedSectionId: option.id,\r\n          filterOption: option.name,\r\n          contactList: this.state.allContact\r\n        });\r\n      }\r\n    }\r\n\r\n  };\r\n  onSaveContact = (data) => {\r\n    let isNew = true;\r\n    const contactList = this.state.allContact.map((contact) => {\r\n      if (contact.id === data.id) {\r\n        isNew = false;\r\n        return data\r\n      } else {\r\n        return contact\r\n      }\r\n    });\r\n    if (isNew) {\r\n      contactList.push(data);\r\n    }\r\n    this.setState({\r\n      alertMessage: isNew ? 'Contact Added Successfully' : 'Contact Updated Successfully',\r\n      showMessage: true,\r\n      contactList: contactList,\r\n      allContact: contactList\r\n    });\r\n    // this.onFilterOptionSelect(this.state.filterOption);\r\n  };\r\n  onDeleteContact = (data) => {\r\n    this.setState({\r\n      alertMessage: 'Contact Deleted Successfully',\r\n      showMessage: true,\r\n      allContact: this.state.allContact.filter((contact) => contact.id !== data.id),\r\n      contactList: this.state.allContact.filter((contact) => contact.id !== data.id)\r\n    })\r\n  };\r\n  onDeleteSelectedContact = () => {\r\n    const contacts = this.state.allContact.filter((contact) => !contact.selected);\r\n    this.setState({\r\n      alertMessage: 'Contact Deleted Successfully',\r\n      showMessage: true,\r\n      allContact: contacts,\r\n      contactList: contacts,\r\n      selectedContacts: 0\r\n    })\r\n  };\r\n  filterContact = (userName) => {\r\n    const {filterOption} = this.state;\r\n    if (userName === '') {\r\n      this.setState({contactList: this.state.allContact});\r\n    } else {\r\n      const filterContact = this.state.allContact.filter((contact) =>\r\n        contact.name.toLowerCase().indexOf(userName.toLowerCase()) > -1);\r\n      if (filterOption === 'All contacts') {\r\n        this.setState({contactList: filterContact});\r\n      } else if (filterOption === 'Frequently contacted') {\r\n        this.setState({contactList: filterContact.filter((contact) => contact.frequently)});\r\n\r\n      } else if (filterOption === 'Starred contacts') {\r\n        this.setState({contactList: filterContact.filter((contact) => contact.starred)});\r\n      }\r\n    }\r\n  };\r\n  handleRequestClose = () => {\r\n    this.setState({\r\n      showMessage: false,\r\n    });\r\n  };\r\n  getAllContact = () => {\r\n    let contactList = this.state.allContact.map((contact) => contact ? {\r\n      ...contact,\r\n      selected: true\r\n    } : contact);\r\n    this.setState({\r\n      selectedContacts: contactList.length,\r\n      allContact: contactList,\r\n      contactList: contactList\r\n    });\r\n  };\r\n  getUnselectedAllContact = () => {\r\n    let contactList = this.state.allContact.map((contact) => contact ? {\r\n      ...contact,\r\n      selected: false\r\n    } : contact);\r\n    this.setState({\r\n      selectedContacts: 0,\r\n      allContact: contactList,\r\n      contactList: contactList\r\n    });\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      noContentFoundMessage: 'No contact found in selected folder',\r\n      alertMessage: '',\r\n      showMessage: false,\r\n      selectedSectionId: 1,\r\n      drawerState: false,\r\n      user: {\r\n        name: 'Robert Johnson',\r\n        email: 'robert.johnson@example.com',\r\n        avatar: require('assets/images/userAvatar/domnic-harris.jpg')\r\n      },\r\n      searchUser: '',\r\n      filterOption: 'All contacts',\r\n      allContact: contactList,\r\n      contactList: contactList,\r\n      selectedContact: null,\r\n      selectedContacts: 0,\r\n      addContactState: false,\r\n    }\r\n  }\r\n\r\n  onAllContactSelect() {\r\n    const selectAll = this.state.selectedContacts < this.state.contactList.length;\r\n    if (selectAll) {\r\n      this.getAllContact();\r\n    } else {\r\n      this.getUnselectedAllContact();\r\n    }\r\n  }\r\n\r\n  updateContactUser(evt) {\r\n    this.setState({\r\n      searchUser: evt.target.value,\r\n    });\r\n    this.filterContact(evt.target.value)\r\n  }\r\n\r\n  onToggleDrawer() {\r\n    this.setState({\r\n      drawerState: !this.state.drawerState\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {user, contactList, addContactState, selectedContacts, alertMessage, showMessage, noContentFoundMessage} = this.state;\r\n    return (\r\n      <div className=\"app-wrapper\">\r\n        <div className=\"app-module animated slideInUpTiny animation-duration-3\">\r\n\r\n          <div className=\"d-block d-xl-none\">\r\n            <Drawer\r\n              open={this.state.drawerState}\r\n              onClose={this.onToggleDrawer.bind(this)}>\r\n              {this.ContactSideBar(user)}\r\n            </Drawer>\r\n          </div>\r\n          <div className=\"app-module-sidenav d-none d-xl-flex\">\r\n            {this.ContactSideBar(user)}\r\n          </div>\r\n\r\n          <div className=\"module-box\">\r\n            <div className=\"module-box-header\">\r\n              <IconButton className=\"drawer-btn d-block d-xl-none\" aria-label=\"Menu\"\r\n                          onClick={this.onToggleDrawer.bind(this)}>\r\n                <i className=\"zmdi zmdi-menu\"/>\r\n              </IconButton>\r\n              <AppModuleHeader placeholder=\"Search contact\" notification={false} apps={false}\r\n                               user={this.state.user}\r\n                               onChange={this.updateContactUser.bind(this)}\r\n                               value={this.state.searchUser}/>\r\n            </div>\r\n            <div className=\"module-box-content\">\r\n\r\n              <div className=\"module-box-topbar\">\r\n                <Checkbox color=\"primary\"\r\n                          indeterminate={selectedContacts > 0 && selectedContacts < contactList.length}\r\n                          checked={selectedContacts > 0}\r\n                          onChange={this.onAllContactSelect.bind(this)}\r\n                          value=\"SelectMail\"/>\r\n\r\n\r\n                {selectedContacts > 0 &&\r\n                <IconButton className=\"icon-btn\"\r\n                            onClick={this.onDeleteSelectedContact.bind(this)}>\r\n                  <i className=\"zmdi zmdi-delete\"/>\r\n                </IconButton>}\r\n\r\n              </div>\r\n              <CustomScrollbars className=\"module-list-scroll scrollbar\"\r\n                                style={{height: this.props.width >= 1200 ? 'calc(100vh - 261px)' : 'calc(100vh - 240px)'}}>\r\n                {contactList.length === 0 ?\r\n                  <div className=\"h-100 d-flex align-items-center justify-content-center\">\r\n                    {noContentFoundMessage}\r\n                  </div>\r\n                  : <ContactList contactList={contactList}\r\n                                 addFavourite={this.addFavourite.bind(this)}\r\n                                 onContactSelect={this.onContactSelect.bind(this)}\r\n                                 onDeleteContact={this.onDeleteContact.bind(this)}\r\n                                 onSaveContact={this.onSaveContact.bind(this)}/>\r\n                }\r\n\r\n\r\n              </CustomScrollbars>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <AddContact open={addContactState} contact={{\r\n          'id': contactId++,\r\n          'name': '',\r\n          'thumb': '',\r\n          'email': '',\r\n          'phone': '',\r\n          'designation': '',\r\n          'selected': false,\r\n          'starred': false,\r\n          'frequently': false,\r\n        }} onSaveContact={this.onSaveContact}\r\n                    onContactClose={this.onContactClose} onDeleteContact={this.onDeleteContact}/>\r\n        <Snackbar\r\n          anchorOrigin={{vertical: 'top', horizontal: 'center'}}\r\n          open={showMessage}\r\n          autoHideDuration={3000}\r\n          onClose={this.handleRequestClose}\r\n          ContentProps={{\r\n            'aria-describedby': 'message-id',\r\n          }}\r\n          message={<span id=\"message-id\">{alertMessage}</span>}\r\n        /></div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({settings}) => {\r\n  const {width} = settings;\r\n  return {width}\r\n};\r\nexport default connect(mapStateToProps)(Contact);"],"sourceRoot":""}